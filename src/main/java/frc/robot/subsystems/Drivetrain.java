// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private WPI_TalonFX leftFrontMotor;
  private WPI_TalonFX leftBackMotor;
  private MotorControllerGroup m_leftMotors;
  private WPI_TalonFX rightFrontMotor;
  private WPI_TalonFX rightBackMotor;
  private MotorControllerGroup m_rightMotors;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
  *
  */
  public Drivetrain() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftFrontMotor = new WPI_TalonFX(1);

    leftBackMotor = new WPI_TalonFX(2);

    m_leftMotors = new MotorControllerGroup(leftFrontMotor, leftBackMotor);
    addChild("m_leftMotors", m_leftMotors);

    rightFrontMotor = new WPI_TalonFX(3);

    rightBackMotor = new WPI_TalonFX(4);

    m_rightMotors = new MotorControllerGroup(rightBackMotor, rightFrontMotor);
    addChild("m_rightMotors", m_rightMotors);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }

  public void initializeMotors() {
    leftFrontMotor.configFactoryDefault();
    rightFrontMotor.configFactoryDefault();

    rightFrontMotor.setInverted(true);
    rightBackMotor.setInverted(true);

    leftBackMotor.follow(leftFrontMotor);
    rightBackMotor.follow(rightFrontMotor);

    leftFrontMotor.configOpenloopRamp(0.5);
    leftBackMotor.configOpenloopRamp(0.5);
    rightFrontMotor.configOpenloopRamp(0.5);
    rightBackMotor.configOpenloopRamp(0.5);

    leftFrontMotor.configNeutralDeadband(0.08);
    rightFrontMotor.configNeutralDeadband(0.08);
  }

  public void run(double l, double r) {
    leftFrontMotor.set(l);
    rightFrontMotor.set(r);
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  // Put methods for controlling this subsystem
  // here. Call these from Commands.

}
