// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.DriveConstants;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

public class Drivetrain extends SubsystemBase {

private WPI_TalonFX leftFrontMotor;
private WPI_TalonFX leftBackMotor;
private WPI_TalonFX rightFrontMotor;
private WPI_TalonFX rightBackMotor;

	private DifferentialDrive differentialDrive;
    private MotorControllerGroup m_leftMotors; 
    private MotorControllerGroup m_rightMotors; 
	public Drivetrain() {
	leftFrontMotor = new WPI_TalonFX(1);
	leftBackMotor = new WPI_TalonFX(2);
	rightFrontMotor = new WPI_TalonFX(3);
	rightBackMotor = new WPI_TalonFX(4);

	m_leftMotors = new MotorControllerGroup(leftFrontMotor, leftBackMotor);
	m_rightMotors = new MotorControllerGroup(rightFrontMotor, rightBackMotor);
	differentialDrive = new DifferentialDrive(leftFrontMotor, rightFrontMotor);
	}

	 @Override
    public void periodic() {
        // This method will be called once per scheduler run
		// Put code here to run every loop
		SmartDashboard.putNumber("LeftEnc", leftFrontMotor.getSelectedSensorPosition(0));
        SmartDashboard.putNumber("RightEnc", rightFrontMotor.getSelectedSensorPosition(0));
    }

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initializeMotors() {
		SmartDashboard.putNumber("Linear P", DriveConstants.LINEAR_P);
		SmartDashboard.putNumber("Angular P", 0);
		leftFrontMotor.configFactoryDefault();
		rightFrontMotor.configFactoryDefault();

		rightBackMotor.setInverted(true);
		rightFrontMotor.setInverted(true);

		rightBackMotor.follow(rightFrontMotor);
		leftBackMotor.follow(leftFrontMotor);

		rightBackMotor.configOpenloopRamp(0.5);
		rightFrontMotor.configOpenloopRamp(0.5);
		leftBackMotor.configOpenloopRamp(0.5);
		leftFrontMotor.configOpenloopRamp(0.5);

		// leftFrontMotor.configNeutralDeadband(0.08);
		// rightFrontMotor.configNeutralDeadband(0.08);
    }

  
	public void run(double l, double r) {
		leftFrontMotor.set(l);
		rightFrontMotor.set(r);
	}

	public void runVelocityMode(double l, double r){
		leftFrontMotor.set(ControlMode.Velocity, l);
		rightFrontMotor.set(ControlMode.Velocity, r);
	}
	//Arcade control for TagAlign testing
	public void runArcade(double f, double r) {
		if (f > 0.5) {
			f = 0.5;
		}
		else if (f < 0.4 && f > 0 ) {
			f = 0.4;
		}
		else if (f > -0.4 && f < 0) {
			f = -0.4;
		}

		if (r > 0.6) {
			r = 0.6;
		}
		else if (r < -0.6) {
			r = -0.6;
		}
		else if (r < 0.2 && r > 0 ) {
			r = 0.2;
		}
		else if (r > -0.2 && r < 0) {
			r = -0.2;
		}
		differentialDrive.arcadeDrive(f, r);
	}
	public void stop() {
		leftFrontMotor.set(ControlMode.PercentOutput, 0);
		rightFrontMotor.set(ControlMode.PercentOutput, 0);
	}
	public void setBrakeMode() {
		leftFrontMotor.setNeutralMode(NeutralMode.Brake);
		leftBackMotor.setNeutralMode(NeutralMode.Brake);
		rightFrontMotor.setNeutralMode(NeutralMode.Brake);
		rightBackMotor.setNeutralMode(NeutralMode.Brake);
	}
	public void setCoastMode() {
		leftFrontMotor.setNeutralMode(NeutralMode.Coast);
		leftBackMotor.setNeutralMode(NeutralMode.Coast);
		rightFrontMotor.setNeutralMode(NeutralMode.Coast);
		rightBackMotor.setNeutralMode(NeutralMode.Coast);
	}
	
	public double getLeftEncoder() {
		return leftFrontMotor.getSelectedSensorPosition();
	}

	public double getRightEncoder() {
		return rightFrontMotor.getSelectedSensorPosition();
	}
}
